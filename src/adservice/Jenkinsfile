#!/usr/bin/env groovy
pipeline {
    agent any
    tools {
        gradle 'gradle'
    }

    environment {
        ACR_REPO_URL = 'microservicesb.azurecr.io'
        IMAGE_TAG = "1.1.${BUILD_NUMBER}"
        SonarQube_url = "http://sonarqube:9000"                   
   }
   

  stages {

        stage(' build image ') {
            agent {
                label "Build"
            }
            steps {
                script {
                    echo "building the docker image..."
                        
                    sh " docker build -t microservicesb.azurecr.io/adservice:${IMAGE_TAG} ./src/adservice" 
                       
                    }
                
            }
        }

       

        stage('SonarQube analysis') {
            agent {
                label "SonarQube"
            }
            environment {
                SonarQube_Token = credentials('adServiceToken')
                
            }
            steps {
                withSonarQubeEnv('sonarqube') {\
                    
                    sh "cd ./src/adservice/ && \
                       chmod +x gradlew && \
                       ./gradlew  sonar -Dsonar.projectKey=microservices \
                       -Dsonar.projectName='microservices' \
                       -Dsonar.host.url=${SonarQube_url} \
                       -Dsonar.token=${SonarQube_Token} "
                }
            }
        }
  

        stage('image scanning ') {
            agent {
                label "trivy"
            }
            steps {
                script {
                    echo "scanning the docker image..."
                    sh "trivy image --exit-code 1 --severity HIGH,CRITICAL microservicesb.azurecr.io/adservice:${IMAGE_TAG} "
                }
            }
        }
 
        stage(' push image to ACR ') {
            agent {
                label "push"
            }
            steps {
                script {
                    echo "pushing the docker image..."
                    withCredentials([usernamePassword(credentialsId: 'ACR', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        
                        sh "echo $PASS | docker login -u $USER --password-stdin ${ACR_REPO_URL}"

                        sh " docker push  microservicesb.azurecr.io/adservice:${IMAGE_TAG} "
    
                    }
                }
            }
        }
    
        stage('trriger ArgoCD application') {   

        steps {
            script {
               withCredentials([usernamePassword(credentialsId: 'github', passwordVariable: 'PASS', usernameVariable: 'USER')]){ 
                
                //git config here for the first time run
                sh 'git config --global user.email "jenkins@jenkins.com"'
                sh 'git config --global user.name "jenkins"'  

                sh ' [ -d "Microservice-Automated-Deployment-to-kubernetes-Cluster" ] && \
                     (cd Microservice-Automated-Deployment-to-kubernetes-Cluster && git pull) || \
                     git clone https://${USER}:${PASS}@github.com/${USER}/Microservice-Automated-Deployment-to-kubernetes-Cluster.git '
                
                sh 'sed -i "s/\\(tag: \\).*/\\1\\"$IMAGE_TAG\\"/" Microservice-Automated-Deployment-to-kubernetes-Cluster/charts/microservices/values/adservice.yaml '
                
                sh "git remote set-url origin https://${USER}:${PASS}@github.com/${USER}/Microservice-Automated-Deployment-to-kubernetes-Cluster.git "
                
                sh 'cd Microservice-Automated-Deployment-to-kubernetes-Cluster && \
                    git add charts/microservices/values/adservice.yaml && \
                    git commit -am "Updates adservice.yaml  with $IMAGE_TAG tag " && \
                    git push origin HEAD:main ' 
                 
            }        
        
                }
            }
        }




}
}
